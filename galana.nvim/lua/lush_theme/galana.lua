-- autogenerated lush spec on Thu 23 Nov 2023 12:40:21 AM CST
-- Run :Lushify
-- then /Normal to find the Normal group and edit your fg & bg colors
local lush = require("lush")
local hsl = lush.hsl
local hsluv = lush.hsluv

local latte = {
  rosewater = "#dc8a78",
  flamingo = "#dd7878",
  pink = "#ea76cb",
  mauve = "#8839ef",
  red = "#d20f39",
  maroon = "#e64553",
  peach = "#fe640b",
  yellow = "#df8e1d",
  green = "#40a02b",
  teal = "#179299",
  sky = "#04a5e5",
  saphire = "#209fb5",
  blue = "#1e66f5",
  lavender = "#7287fd",
  -- text = "#4c4f69",
  -- subtext1 = "#5c5f77",
  -- subtext0 = "#6c6f85",
  -- overlay2 = "#7c7f93",
  -- overlay1 = "#8c8fa1",
  -- overlay0 = "#9ca0b0",
  -- surface2 = "#acb0be",
  -- surface1 = "#bcc0cc",
  -- surface0 = "#ccd0da",
  -- base = "#eff1f5",
  -- mantle = "#e6e9ef",
  -- crust = "#dce0e8",
}

local principle = {
  nectar = "#2cd391",
  edge = "#d6de4A",
  lantern = "#ffe300",
  forge = "#ff8e3f",
  grail = "#ff614f",
  heart = "#ff7f8c",
  rose = "#ef64ff",
  knock = "#b54efc",
  scale = "#cb9f4d",
  sky = "#2c69e1",
  winter = "#beefff",
  moon = "#cbbdd6",
  moth = "#f2eac3"
}

local mocha = {
  rosewater = hsl("#f5e0dc"),
  flamingo = hsl("#f2cdcd"),
  pink = hsl("#f5c2e7"),
  mauve = hsl("#cba6f7"),
  red = hsl("#f37ba8"),
  maroon = hsl("#eba0ac"),
  peach = hsl("#fab387"),
  yellow = hsl("#f9e2af"),
  green = hsl("#abe9b3"),
  teal = hsl("#94e2d5"),
  sky = hsl("#89dceb"),
  saphire = hsl("#74c7ec"),
  blue = hsl("#89b4fa"),
  lavender = hsl("#b4befe"),
  text = hsl("#cdd6f4"),
  subtext1 = hsl("#bac2de"),
  subtext0 = hsl("#a6adc8"),
  overlay2 = hsl("#9399b2"),
  overlay1 = hsl("#7f849c"),
  overlay0 = hsl("#6c7086"),
  surface2 = hsl("#585b70"),
  surface1 = hsl("#45475a"),
  surface0 = hsl("#313244"),
  base = hsl("#1e1e2e"),
  mantle = hsl("#181825"),
  crust = hsl("#11111b"),
}

local custom = {
  black = hsl("#0f0f17"),
  text = hsl("#cdd6f4"),
  -- black = catppuccin_mocha.base.darken(50),
  verdant_green = hsl("#37a3a5"),

  red = hsl("#e95678"),
  baby_pink = hsl("#f86587"),
  pink = hsl("#ff7eb6"),
  horizon_orange = hsl("#f09383"),
  orange = hsl("#ff9e64"),
  yellow = hsl("#f6ca6b"),
  tokyodark_green = hsl("#95c561"),
  pale_yellow_green = hsl("#e5fcc2"),
  yellow_green = hsl("#bae881"),
  pale_green = hsl("#c7f9cc"),
  dead_green = hsl("#9de0ad"),
  green = hsl("#80ed99"),
  green1 = hsl("#42be65"),
  vibrant_green = hsl("#2ee6a6"),
  teal = hsl("#1abc9c"),
  green_cyan = hsl("#25b2bc"),
  -- cyan = hsl("#18b8d9"),
  pale_blue = hsl("#a4c8de"),
  light_blue = hsl("#7dcfff"),
  blue = hsl("#78a9ff"),
  nord_blue = hsl("#6b9cf2"),
  purple = hsl("#be95ff"),
  dark_purple = hsl("#9d7cd8"),

  deuteranopia_fg_added_intense = "#8080ff",
  tritanopia_magenta_intense = "#ef7fff",
  tritanopia_fg_added_intense = "#50c0ef",

  red_intense = "#ff5f5f",
  green_intense = "#44df44",
  yellow_intense = "#efef00",
  blue_intense = "#338fff",
  magenta_intense = "#ff66ff",
  cyan_intense = "#00eff0",
  cyan = "#00d3d0",
  cyan_warmer = "#4ae2f0",
  cyan_cooler = "#6ae4b9",
  cyan_faint = "#9ac8e0",
  rust = "#db7b5f",
  gold = "#c0965b",
  olive = "#9cbd6f",
  slate = "#76afbf",
  indigo = "#9099d9",
  maroon = "#cf7fa7",
  -- pink = "#d09dc0",

  -- git diffs
  bg_added = "#00381f",
  bg_added_faint = "#002910",
  bg_added_refine = "#034f2f",
  bg_added_fringe = "#237f3f",
  fg_added = "#a0e0a0",
  fg_added_intense = "#80e080",
  bg_changed = "#363300",
  bg_changed_faint = "#2a1f00",
  bg_changed_refine = "#4a4a00",
  bg_changed_fringe = "#8a7a00",
  fg_changed = "#efef80",
  fg_changed_intense = "#c0b05f",
  bg_removed = "#4f1119",
  bg_removed_faint = "#380a0f",
  bg_removed_refine = "#781a1f",
  bg_removed_fringe = "#b81a1f",
  fg_removed = "#ffbfbf",
  fg_removed_intense = "#ff9095",
  bg_diff_context = "#1a1a1a",
}


-- useful replacement commands
-- '<,'>s/link = "\(.\+\)"/\1/g

-- LSP/Linters mistakenly show `undefined global` errors in the spec, they may
-- support an annotation like the following. Consult your server documentation.
---@diagnostic disable: undefined-global
local theme = lush(function(injected_functions)
  local sym = injected_functions.sym
  return {
    -- The following are the Neovim (as of 0.8.0-dev+100-g371dfb174) highlight
    -- groups, mostly used for styling UI elements.
    -- Comment them out and add your own properties to override the defaults.
    -- An empty definition `{}` will clear all styling, leaving elements looking
    -- like the 'Normal' group.
    -- To be able to link to a group, it must already be defined, so you may have
    -- to reorder items as you go.

    --
    -- See :h highlight-groups
    --

    -- normal
    Normal             { fg= custom.text, bg= custom.black, }, -- Normal text
    NormalNC           { Normal }, -- normal text in non-current windows
    -- NormalSB           { Normal }, -- normal text in non-current windows
    NormalFloat        { Normal }, -- Normal text in floating windows.

    -- tabline
    TabLine               { fg = mocha.surface1, bg= mocha.mantle, }, -- Tab pages line, not active tab page label
    TabLineFill           { }, -- Tab pages line, where there are no labels
    TabLineSel            { fg= custom.green, bg= mocha.surface1, }, -- Tab pages line, active tab page label
    HarpoonInactive       { TabLine },
    HarpoonNumberInactive { TabLine },
    HarpoonActive         { TabLineSel },
    HarpoonNumberActive   { TabLineSel },
    HarpoonWindow         { fg = custom.text, bg = custom.black },
    HarpoonBorder         { fg = custom.red },

    -- indent-blankline.nvim
    IndentBlankLineOdd { fg = mocha.overlay0 },
    IndentBlankLineEven { fg = mocha.overlay1 },

    -- snack.nvim
    SnacksNormal = { NormalFloat },
    SnacksWinBar = { Title },
    SnacksBackdrop = { fg = mocha.overlay0 },
    SnacksNormalNC = { NormalFloat },
    SnacksWinBarNC = { SnacksWinBar },

    SnacksNotifierInfo = { fg = mocha.blue },
    SnacksNotifierIconInfo = { fg = mocha.blue },
    SnacksNotifierTitleInfo = { fg = mocha.blue, gui = { "italic" } },
    SnacksNotifierFooterInfo = { DiagnosticInfo },
    SnacksNotifierBorderInfo = { fg = mocha.blue },
    SnacksNotifierWarn = { fg = mocha.yellow },
    SnacksNotifierIconWarn = { fg = mocha.yellow },
    SnacksNotifierTitleWarn = { fg = mocha.yellow, gui = { "italic" } },
    SnacksNotifierBorderWarn = { fg = mocha.yellow },
    SnacksNotifierFooterWarn = { DiagnosticWarn },
    SnacksNotifierDebug = { fg = mocha.peach },
    SnacksNotifierIconDebug = { fg = mocha.peach },
    SnacksNotifierTitleDebug = { fg = mocha.peach, gui = { "italic" } },
    SnacksNotifierBorderDebug = { fg = mocha.peach },
    SnacksNotifierFooterDebug = { DiagnosticHint },
    SnacksNotifierError = { fg = mocha.red },
    SnacksNotifierIconError = { fg = mocha.red },
    SnacksNotifierTitleError = { fg = mocha.red, gui = { "italic" } },
    SnacksNotifierBorderError = { fg = mocha.red },
    SnacksNotifierFooterError = { DiagnosticError },
    SnacksNotifierTrace = { fg = mocha.rosewater },
    SnacksNotifierIconTrace = { fg = mocha.rosewater },
    SnacksNotifierTitleTrace = { fg = mocha.rosewater, gui = { "italic" } },
    SnacksNotifierBorderTrace = { fg = mocha.rosewater },
    SnacksNotifierFooterTrace = { DiagnosticHint },

    SnacksDashboardNormal = { Normal },
    SnacksDashboardDesc = { fg = mocha.blue },
    SnacksDashboardFile = { fg = mocha.lavender },
    SnacksDashboardDir = { NonText },
    SnacksDashboardFooter = { fg = mocha.yellow, gui = { "italic" } },
    SnacksDashboardHeader = { fg = mocha.blue },
    SnacksDashboardIcon = { fg = mocha.pink, bold = true },
    SnacksDashboardKey = { fg = mocha.peach },
    SnacksDashboardTerminal = { SnacksDashboardNormal },
    SnacksDashboardSpecial = { Special },
    SnacksDashboardTitle = { Title },

    SnacksIndent = { fg = mocha.surface0 },
    SnacksIndentScope = { fg = mocha.text },

    SnacksPickerGitStatusUntracked = { fg = mocha.text },

    Cursor             { fg = custom.black, bg = mocha.text }, -- Character under the cursor (NOTE: get overwritten by terminal config)
    lCursor            { Cursor }, -- Character under the cursor when |language-mapping| is used (see 'guicursor')
    CursorIM           { Cursor }, -- Like Cursor, but used when in IME mode |CursorIM|
    CursorColumn       { }, -- Screen-column at the cursor, when 'cursorcolumn' is set.
    CursorLine         { }, -- Screen-line at the cursor, when 'cursorline' is set. Low-priority if foreground (ctermfg OR guifg) is not set.

    -- LspInlayHint { fg = mocha.overlay0, bg = mocha.surface0},
    LspInlayHint { fg = mocha.overlay0, bg = mocha.base},

    diffAdded                                   { fg= custom.green, },
    diffRemoved                                 { fg= custom.red, },
    diffChanged                                 { fg= custom.yellow, },
    diffOldFile                                 { fg="#fae3b0", },
    diffNewFile                                 { fg="#ff9d64", },
    diffFile                                    { fg="#78a9ff", },
    diffLine                                    { fg="#6c7086", },
    diffIndexLine                               { fg="#b5e8e0", },
    DiffAdd            {  bg= custom.green.darken(90), }, -- Diff mode: Added line |diff.txt|
    DiffChange         {  bg= custom.yellow.darken(90), }, -- Diff mode: Changed line |diff.txt|
    DiffDelete         {  bg=custom.red.darken(90), }, -- Diff mode: Deleted line |diff.txt|
    DiffText           {  bg="#222b41", }, -- Diff mode: Changed text within a changed line |diff.txt|
    sym"@text.diff.add"                         { diffAdded }, -- added text (for diff files)
    sym"@text.diff.delete"                      { diffRemoved }, -- deleted text (for diff files)

    sym"@text"                                  { fg="#cdd6f4", }, -- For string considerated text in a markup language.
    sym"@text.literal"                          { fg="#f6ca6b", }, -- used for inline code in markdown and for doc in python (""")
    sym"@text.reference"                        { gui="bold", },
    sym"@text.title"                            { fg="#78a9ff", gui="bold", },
    sym"@text.uri"                              { fg="#f6ca6b", gui="underline,italic", },
    sym"@text.todo"                             { fg="#0f0f17", bg="#fae3b0", },

    TermCursor         {  gui="reverse", }, -- Cursor in a focused terminal
    TermCursorNC       { }, -- Cursor in an unfocused terminal
    ErrorMsg           { fg = custom.red, bg = custom.black, gui = "bold" }, -- Error messages on the command line
    Folded             {  fg="#cdd6f4", bg="#282737", }, -- Line used for closed folds
    FoldColumn         {  fg="#7dcfff", bg="#282737", }, -- 'foldcolumn'
    SignColumn         {  fg= mocha.surface0, }, -- Column where |signs| are displayed
    CursorLineFold     { FoldColumn }, -- Like FoldColumn when 'cursorline' is set for the cursor line
    CursorLineSign     { SignColumn }, -- Like SignColumn when 'cursorline' is set for the cursor line

    CurSearch          { fg= custom.black, bg = custom.red, }, -- Highlighting a search pattern under the cursor (see 'hlsearch')
    Search             { fg= custom.black, bg = custom.pink, }, -- Last search pattern highlighting (see 'hlsearch'). Also used for similar items that need to stand out.
    IncSearch          { fg= custom.black, bg = custom.yellow, }, -- 'incsearch' highlighting; also used for the text replaced with ":s///c"
    Substitute         { Search }, -- |:substitute| replacement text highlighting

    SpellBad           { sp = custom.red, gui="undercurl"}, -- Word that is not recognized by the spellchecker. |spell| Combined with the highlighting used otherwise.
    SpellCap           { sp = custom.yellow, gui="undercurl"}, -- Word that should start with a capital. |spell| Combined with the highlighting used otherwise.
    SpellLocal         { sp = custom.blue, gui="undercurl"}, -- Word that is recognized by the spellchecker as one that is used in another region. |spell| Combined with the highlighting used otherwise.
    SpellRare          { sp = custom.green, gui="undercurl"}, -- Word that is recognized by the spellchecker as one that is hardly ever used. |spell| Combined with the highlighting used otherwise.

    -- status line?
    StatusLine         { fg="#cdd6f4", bg="#181825", }, -- Status line of current window
    StatusLineNC       {  fg="#45475a", bg="#181825", }, -- Status lines of not-current windows. Note: If this is equal to "StatusLine" Vim will use "^^^" in the status line of the current window.

    Visual             { gui="bold", bg=mocha.surface0, }, -- Visual mode selection
    VisualNOS          { Visual }, -- Visual mode selection when vim is "Not Owning the Selection". (deprecated?)

    WarningMsg         { fg = custom.yellow }, -- Warning messages
    Whitespace         { fg= mocha.surface0, }, -- "nbsp", "space", "tab" and "trail" in 'listchars'
    NonText            { fg= mocha.overlay0,  }, -- '@' at the end of the window, characters from 'showbreak' and other characters that do not really exist in the text (e.g., ">" displayed when a double-wide character doesn't fit at the end of the line). See also |hl-EndOfBuffer|.

    VertSplit          {  fg= mocha.surface0, }, -- Column separating vertically split windows
    Winseparator       { fg = mocha.surface0,  }, -- Separator between window splits. Inherts from |hl-VertSplit| by default, which it will replace eventually.

    -- Line number
    LineNr             { fg = mocha.surface1, }, -- Line number for ":number" and ":#" commands, and when 'number' or 'relativenumber' option is set.
    LineNrAbove        { LineNr }, -- Line number for when the 'relativenumber' option is set, above the cursor line
    LineNrBelow        { LineNr }, -- Line number for when the 'relativenumber' option is set, below the cursor line
    CursorLineNr       { fg = custom.green }, -- Like LineNr when 'cursorline' or 'relativenumber' is set for the cursor line.


    MatchParen         { fg= custom.yellow, gui="bold", bg=custom.black.lighten(10) }, -- Character under the cursor or just before it, if it is a paired bracket, and its match. |pi_paren.txt|

    -- Misc.
    ColorColumn        { bg = mocha.surface0 }, -- Columns set with 'colorcolumn'
    Title              { fg = custom.verdant_green, gui="bold", }, -- Titles for output from ":set all", ":autocmd" etc.
    Directory          {  fg = custom.verdant_green, }, -- Directory names (and other special names in listings)
    ModeMsg            { fg= custom.verdant_green, gui="bold", }, -- 'showmode' message (e.g., "-- INSERT -- ")
    Conceal            { fg = mocha.overlay1 }, -- Placeholder characters substituted for concealed text (see 'conceallevel')

    -- idk
    SpecialKey         { fg= mocha.surface0, }, -- Unprintable characters: text displayed differently from what it really is. But not 'listchars' whitespace. |hl-Whitespace|
    MoreMsg            { fg="#80ed99", }, -- |more-prompt|
    EndOfBuffer        {  fg="#0f0f17", }, -- Filler lines (~) after the end of the buffer. By default, this is highlighted like |hl-NonText|.
    WildMenu       { fg=custom.black, bg=custom.red,  }, -- Current match in 'wildmenu' completion (what is this???)
    WinBar         { fg = mocha.rosewater }, -- Window bar of current window
    WinBarNC       { WinBar }, -- Window bar of not-current windows
    -- MsgArea        { }, -- Area for messages and cmdline
    -- MsgSeparator   { }, -- Separator for scrolled messages, `msgsep` flag of 'display'


    FloatBorder        { fg= custom.red, },
    TelescopeBorder    { FloatBorder },
    LspInfoBorder      { FloatBorder },

    TelescopePromptPrefix    { fg= custom.red },


    -- Telescope settings doesn't seem to work (except border)?
    -- TelescopeNormal = { NormalFloat },
    -- TelescopeSelectionCaret = { fg = custom.orange },
    -- TelescopeSelection = { fg = custom.text, bg = mocha.surface0, gui = "bold" },


    healthSuccess                               { fg="#0f0f17", bg="#abe9b3", },
    healthError                                 { fg="#e95678", },
    healthWarning                               { fg="#fae3b0", },


    -- Common vim syntax groups used for all kinds of code and markup.
    -- Commented-out groups should chain up to their preferred (*) group
    -- by default.
    --
    -- See :h group-name
    --
    -- Uncomment and edit if you want more specific syntax highlighting.

    Comment        { fg= mocha.overlay0 }, -- Any comment
    -- DiagnosticUnnecessary                       { Comment },
    -- sym"@comment"                               { Comment },
    -- MarkVirtTextHL                              { Comment },

    Constant                     { fg = custom.blue }, -- (*) Any constant
    sym"@lsp.type.enumMember"    { Constant },
    sym"@constant"               { fg="#ff9d64", },
    sym"@constant.builtin"       { fg="#f6ca6b", },
    sym"@constant.macro"         { fg="#78a9ff", },
    sym"@lsp.typemod.variable.constant"         { fg= custom.orange, },

    String         { fg = custom.green, }, --   A string constant: "this is a string"
    sym"@string"   { String }, -- For strings.
    sym"@string.regex"                          { fg="#7dcfff", }, -- For regexes.
    sym"@string.escape"                         { fg="#7dcfff", }, -- For escape character within a string.
    sym"@string.special"                        { fg="#78a9ff", }, -- other special strings (e.g. dates)
    -- NvimString     { String },

    Character        { fg = custom.blue }, --   A character constant: 'c', '\n'
    sym"@character"  { Character },

    Number           { fg = custom.yellow }, --   A number constant: 234, 0xff
    -- sym"@number"     { Number },
    -- NvimNumber       { Number },
    Boolean          { fg= custom.yellow, gui="bold", }, --   A boolean constant: TRUE, false
    -- sym"@boolean"    { Boolean },
    Float            { fg = custom.yellow }, --   A floating point constant: 2.3e10
    sym"@float"      { fg= custom.yellow, },

    Identifier         { fg = custom.blue }, -- (*) Any variable name
    -- NvimIdentifier  { Identifier },

    Function                                    { fg = custom.verdant_green, gui="bold", }, --   Function name (also: methods for classes)
    -- sym"@function"                              { Function }, -- For function (calls & definition)
    -- sym"@function.call"                         { Function }, -- function calls
    sym"@function.builtin"                      { Function }, -- For macro defined functions (calls & definition): each macro_rules in RusC
    sym"@lsp.typemod.method.defaultLibrary"     { Function },
    sym"@lsp.typemod.function.defaultLibrary"   { Function },
    -- sym"@lsp.type.decorator"                    { Function },
    -- sym"@lsp.type.function"                     { Function },
    -- sym"@lsp.type.method"                       { Function },

    -- sym"@method"               { fg = custom.verdant_green, gui="bold", }, -- For method calls and functions
    -- sym"@method.call"          { sym"@method" }, -- method calls

    sym"@constructor"                           { fg="#7dcfff", },

    sym"@parameter"                             { fg="#78a9ff", },
    sym"@lsp.type.parameter"                    { sym"@parameter" },

    Statement            { fg="#78a9ff", }, -- (*) Any statement
    -- luaStatement         { Statement },
    Conditional          { fg="#be95ff", gui="bold", }, --   if, then, else, endif, switch, etc.
    -- sym"@conditional"    { Conditional },
    -- luaCondElse          { Conditional },
    Repeat               { fg="#ff7eb6", gui="bold", }, --   for, do, while, etc.
    -- sym"@repeat"         { Repeat },
    Label                { fg="#ff7eb6", }, --   case, default, etc.
    sym"@label"          { Label },
    Operator             { fg="#be95ff", gui="bold", }, --   "sizeof", "+", "*", etc.
    -- sym"@operator"       { Operator },
    -- NvimAssignment       { Operator },
    -- NvimOperator         { Operator },
    Keyword                       { fg="#be95ff", }, --   any other keyword
    sym"@keyword"                               { Keyword },
    sym"@keyword.function"                      { fg="#be95ff", },
    sym"@keyword.operator"                      { fg="#be95ff", gui="bold", },
    sym"@keyword.export"                        { fg="#89dceb", gui="bold", },
    sym"@keyword.return"                        { fg="#be95ff", },
    sym"@lsp.type.keyword"                      { sym"@keyword" },

    Exception            { fg="#78a9ff", }, --   try, catch, throw

    PreProc              { fg="#ff7eb6", }, -- (*) Generic Preprocessor
    -- sym"@preproc"        { PreProc },
    Include              { fg = custom.verdant_green, }, --   Preprocessor #include
    -- sym"@include"        { Include },
    Define               { fg="#be95ff", }, --   Preprocessor #define
    -- sym"@define"      { Define },
    Macro                     { fg="#78a9ff", }, --   Same as Define
    -- sym"@macro"               { Macro },
    -- sym"@lsp.type.macro"      { Macro },
    PreCondit            { PreProc }, --   Preprocessor #if, #else, #endif, etc.

    Type                     { fg="#ff7eb6", }, -- (*) int, long, char, etc.
    -- sym"@type"               { Type },
    -- sym"@lsp.type.type"      { Type },
    -- NvimNumberPrefix         { Type },
    -- NvimOptionSigil          { Type },
    StorageClass         { fg="#ff7eb6", }, --   static, register, volatile, etc.
    -- sym"@storageclass"   { StorageClass },
    -- -- Structure      { },
    Structure                 { fg="#be95ff", }, --   struct, union, enum, etc.
    -- sym"@lsp.type.class"      { Structure },
    -- sym"@lsp.type.struct"     { Structure },
    Typedef                             { fg="#ff7eb6", }, -- A typedef
    -- sym"@lsp.type.typeParameter"        { Typedef },

    Special                   { fg="#7dcfff", }, -- (*) Any special symbol
    SpecialChar               { fg="#93baff", }, --   Special character in a constant
    SpecialComment            { Special }, --   Special things inside a comment (e.g. '\n')
    NvimRegister              { SpecialChar },
    NvimStringSpecial         { SpecialChar },
    sym"@character.special"   { SpecialChar },
    Tag                  { fg="#ff7eb6", }, -- You can use CTRL-] on this

    -- Delimiter            { fg="#93baff", }, --   Character that needs attention
    Delimiter            { fg= custom.blue.lighten(20), }, --   Character that needs attention
    sym"@punctuation"    { Delimiter },
    sym"@punctuation.delimiter"                 { fg="#93baff", }, -- For delimiter ie: .
    sym"@punctuation.bracket"                   { fg="#93baff", }, -- For brackets & parenthesis
    sym"@punctuation.special"                   { fg="#78a9ff", gui="bold", }, -- For special punctuation that does not fall in the categories before
    -- NvimParenthesis      { Delimiter },
    -- NvimColon            { Delimiter },
    -- NvimComma            { Delimiter },
    -- NvimArrow            { Delimiter },

    Debug          { fg="#78a9ff", }, --   Debugging statements
    -- sym"@debug"    { Debug },

    Underlined     { gui = "underline" }, -- Text that stands out, HTML links
    -- Underlined                                  { fg="#80ed99", },
    Italic         { },
    Bold           { gui="bold", },
    -- Ignore         { }, -- Left blank, hidden |hl-Ignore| (NOTE: May be invisible here in template)
    Error             { fg="#0f0f17", bg="#e95678", }, -- Any erroneous construct
    sym"@error"          { Error },
    -- NvimInvalid       { Error },
    Todo        { fg="#ff7eb6", gui="bold", bg="#282737",  }, -- Anything that needs extra attention; mostly the keywords TODO FIXME and XXX


    -- TODO:
    -- These groups are for the native LSP client and diagnostic system. Some
    -- other LSP clients may use these groups, or use their own. Consult your
    -- LSP client's documentation.

    -- See :h lsp-highlight, some groups may not be listed, submit a PR fix to lush-template!
    --
    LspReferenceText            { bg = custom.black.lighten(16), } , -- Used for highlighting "text" references
    LspReferenceRead            { LspReferenceText } , -- Used for highlighting "read" references
    LspReferenceWrite           { LspReferenceText } , -- Used for highlighting "write" references
    -- LspCodeLens                 { } , -- Used to color the virtual text of the codelens. See |nvim_buf_set_extmark()|.
    -- LspCodeLensSeparator        { } , -- Used to color the seperator between two or more code lens.
    -- LspSignatureActiveParameter { } , -- Used to highlight the active parameter in the signature help. See |vim.lsp.handlers.signature_help()|.


    -- LspReferenceWrite                           { bg="#45475a", },
    -- LspReferenceRead                            { bg="#45475a", },
    -- LspReferenceText                            { bg="#45475a", },



    -- TODO:
    -- See :h diagnostic-highlights, some groups may not be listed, submit a PR fix to lush-template!
    --
    -- DiagnosticError            { } , -- Used as the base highlight group. Other Diagnostic highlights link to this by default (except Underline)
    -- DiagnosticWarn             { } , -- Used as the base highlight group. Other Diagnostic highlights link to this by default (except Underline)
    -- DiagnosticInfo             { } , -- Used as the base highlight group. Other Diagnostic highlights link to this by default (except Underline)
    -- DiagnosticHint             { } , -- Used as the base highlight group. Other Diagnostic highlights link to this by default (except Underline)
    -- DiagnosticOk               { } , -- Used as the base highlight group. Other Diagnostic highlights link to this by default (except Underline)
    -- DiagnosticVirtualTextError { } , -- Used for "Error" diagnostic virtual text.
    -- DiagnosticVirtualTextWarn  { } , -- Used for "Warn" diagnostic virtual text.
    -- DiagnosticVirtualTextInfo  { } , -- Used for "Info" diagnostic virtual text.
    -- DiagnosticVirtualTextHint  { } , -- Used for "Hint" diagnostic virtual text.
    -- DiagnosticVirtualTextOk    { } , -- Used for "Ok" diagnostic virtual text.
    -- DiagnosticUnderlineError   { } , -- Used to underline "Error" diagnostics.
    -- DiagnosticUnderlineWarn    { } , -- Used to underline "Warn" diagnostics.
    -- DiagnosticUnderlineInfo    { } , -- Used to underline "Info" diagnostics.
    -- DiagnosticUnderlineHint    { } , -- Used to underline "Hint" diagnostics.
    -- DiagnosticUnderlineOk      { } , -- Used to underline "Ok" diagnostics.
    -- DiagnosticFloatingError    { } , -- Used to color "Error" diagnostic messages in diagnostics float. See |vim.diagnostic.open_float()|
    -- DiagnosticFloatingWarn     { } , -- Used to color "Warn" diagnostic messages in diagnostics float.
    -- DiagnosticFloatingInfo     { } , -- Used to color "Info" diagnostic messages in diagnostics float.
    -- DiagnosticFloatingHint     { } , -- Used to color "Hint" diagnostic messages in diagnostics float.
    -- DiagnosticFloatingOk       { } , -- Used to color "Ok" diagnostic messages in diagnostics float.
    -- DiagnosticSignError        { } , -- Used for "Error" signs in sign column.
    -- DiagnosticSignWarn         { } , -- Used for "Warn" signs in sign column.
    -- DiagnosticSignInfo         { } , -- Used for "Info" signs in sign column.
    -- DiagnosticSignHint         { } , -- Used for "Hint" signs in sign column.
    -- DiagnosticSignOk           { } , -- Used for "Ok" signs in sign column.
    DiagnosticError                             { fg="#e95678", },
    DiagnosticWarn                              { fg = custom.yellow, },
    DiagnosticInfo                              { fg="#89dceb", },
    DiagnosticHint                              { fg="#be95ff", },
    DiagnosticOk                                { fg="lightgreen", },
    DiagnosticVirtualTextOk                     { DiagnosticOk },
    DiagnosticFloatingOk                        { DiagnosticOk },
    DiagnosticSignOk                            { DiagnosticOk },
    DiagnosticUnderlineError                    { sp="#e95678", gui="underline", },
    DiagnosticUnderlineWarn                     { sp = custom.yellow, gui="underline", },
    DiagnosticUnderlineInfo                     { sp="#89dceb", gui="underline", },
    DiagnosticUnderlineHint                     { sp="#b5e8e0", gui="underline", },
    DiagnosticUnderlineOk                       { sp="lightgreen", gui="underline", },
    DiagnosticVirtualTextError                  { fg="#e95678", bg="#241620", },
    DiagnosticVirtualTextWarn                   { fg = custom.yellow, bg="#252326", },
    DiagnosticVirtualTextInfo                   { fg="#89dceb", bg="#1b222b", },
    DiagnosticVirtualTextHint                   { fg="#b5e8e0", bg="#1f242a", },
    DiagnosticFloatingError                     { fg="#e95678", },
    DiagnosticFloatingWarn                      { fg = custom.yellow, },
    DiagnosticFloatingInfo                      { fg="#89dceb", },
    DiagnosticFloatingHint                      { fg="#b5e8e0", },
    DiagnosticSignError                         { fg="#e95678", },
    DiagnosticSignWarn                          { fg = custom.yellow, },
    DiagnosticSignInfo                          { fg="#89dceb", },
    DiagnosticSignHint                          { fg="#b5e8e0", },
    DiagnosticDeprecated                        { sp="red", gui="strikethrough", },
    DiagnosticFname                             { fg="#cdd6f4", },
    DiagnosticText                              { fg="#cdd6f4", },
    DiagnosticSource                            { fg="#6c7086", },
    DiagnosticInformation                       { fg="#abe9b3", },


    TreesitterContextBottom { sp = mocha.surface1, gui="underline" },

    -- TODO:
    -- Tree-Sitter syntax groups.
    --
    -- See :h treesitter-highlight-groups, some groups may not be listed,
    -- submit a PR fix to lush-template!
    --
    -- Tree-Sitter groups are defined with an "@" symbol, which must be
    -- specially handled to be valid lua code, we do this via the special
    -- sym function. The following are all valid ways to call the sym function,
    -- for more details see https://www.lua.org/pil/5.html
    --
    -- sym("@text.literal")
    -- sym('@text.literal')
    -- sym"@text.literal"
    -- sym'@text.literal'
    --
    -- For more information see https://github.com/rktjmp/lush.nvim/issues/109

    -- sym"@text.literal"      { }, -- Comment
    -- sym"@text.reference"    { }, -- Identifier
    -- sym"@text.title"        { }, -- Title
    -- sym"@text.uri"          { }, -- Underlined
    -- sym"@text.underline"    { }, -- Underlined
    -- sym"@text.todo"         { }, -- Todo
    -- sym"@comment"           { }, -- Comment
    -- sym"@punctuation"       { }, -- Delimiter
    -- sym"@constant"          { }, -- Constant
    -- sym"@constant.builtin"  { }, -- Special
    -- sym"@constant.macro"    { }, -- Define
    -- sym"@define"            { }, -- Define
    -- sym"@macro"             { }, -- Macro
    -- sym"@string"            { }, -- String
    -- sym"@string.escape"     { }, -- SpecialChar
    -- sym"@string.special"    { }, -- SpecialChar
    -- sym"@character"         { }, -- Character
    -- sym"@character.special" { }, -- SpecialChar
    -- sym"@number"            { }, -- Number
    -- sym"@boolean"           { }, -- Boolean
    -- sym"@float"             { }, -- Float
    -- sym"@function"          { }, -- Function
    -- sym"@function.builtin"  { }, -- Special
    -- sym"@function.macro"    { }, -- Macro
    -- sym"@parameter"         { }, -- Identifier
    -- sym"@method"            { }, -- Function
    -- sym"@field"             { }, -- Identifier
    -- sym"@property"          { }, -- Identifier
    -- sym"@constructor"       { }, -- Special
    -- sym"@conditional"       { }, -- Conditional
    -- sym"@repeat"            { }, -- Repeat
    -- sym"@label"             { }, -- Label
    -- sym"@operator"          { }, -- Operator
    -- sym"@keyword"           { }, -- Keyword
    -- sym"@exception"         { }, -- Exception
    -- sym"@variable"          { }, -- Identifier
    -- sym"@type"              { }, -- Type
    -- sym"@type.definition"   { }, -- Typedef
    -- sym"@storageclass"      { }, -- StorageClass
    -- sym"@structure"         { }, -- Structure
    -- sym"@namespace"         { }, -- Identifier
    -- sym"@include"           { }, -- Include
    -- sym"@preproc"           { }, -- PreProc
    -- sym"@debug"             { }, -- Debug
    -- sym"@tag"               { }, -- Tag

    -- Language specific:

    -- css
    -- sym"@string.plain.css"                      { fg="#ff9d64", },
    -- sym"@property.id.css"                       { fg="#78a9ff", },
    -- sym"@type.tag.css"                          { fg="#9d7dd8", },
    -- sym"@number.css"                            { fg="#ff9d64", },
    -- sym"@property.class.css"                    { fg="#fae3b0", },

    -- toml
    sym"@property.toml"                         { fg="#78a9ff", },

    -- yaml
    sym"@field.yaml"                            { fg="#78a9ff", },

    -- json
    sym"@label.json"                            { fg="#78a9ff", },

    -- TSX (typescript react)
    sym"@tag.attribute.tsx"                     { fg="#9d7dd8", },

    -- ruby
    -- sym"@symbol.ruby"                           { fg="#f2cdcd", },

    -- cpp
    sym"@property.cpp"                          { fg="#f5e0dc", },

    -- lua
    sym"@constructor.lua"                       { fg="#f2cdcd", },




    -- Mark ---------------------------------------------------------------
    -- MarkSignHL                                  { Identifier },
    MarkSignHL                                  { fg = custom.verdant_green },
    MarkSignNumHL                               { CursorLineNr },
    -- MarkSignNumHL                               { fg = mocha.overlay2 }, -- MarkSignNumHL  xxx links to CursorLineNr



    -- Hop ---------------------------------------------------------------
    HopNextKey   { gui="bold", fg="#ff007c", },
    -- HopNextKey1  { gui="bold", fg="#00dfff", },
    -- HopNextKey2  { fg="#2b8db3", },
    -- HopNextKey      { fg= custom.verdant_green, gui="bold", },
    HopNextKey1     { fg= custom.cyan, gui="bold", },
    HopNextKey2     { fg= mocha.overlay0, gui="bold", },
    HopUnmatched    { fg= mocha.surface0, },
    -- HopPreview      { IncSearch }, -- what is this for?



    -- Rainbow
    RainbowDelimiterRed        { fg="#25b2bc", },
    RainbowDelimiterYellow     { fg="#ee5396", },
    RainbowDelimiterBlue       { fg="#f6ca6b", },
    RainbowDelimiterOrange     { fg="#be95ff", },
    RainbowDelimiterGreen      { fg="#2ee6a6", },
    RainbowDelimiterViolet     { fg="#ff9e64", },
    RainbowDelimiterCyan       { fg="#ff7eb6", },

    -- TSRainbowOrange                             { fg="#ff9d64", },
    -- TSRainbowGreen                              { fg="#abe9b3", },
    -- TSRainbowBlue                               { fg="#78a9ff", },
    -- TSRainbowCyan                               { fg="#b5e8e0", },
    -- TSRainbowRed                                { fg="#e95678", },
    -- TSRainbowYellow                             { fg="#fae3b0", },
    -- TSRainbowViolet                             { fg="#9d7dd8", },

    rainbowcol5                                 { fg="#f5c2e7", },
    rainbowcol3                                 { fg="#fae3b0", },
    rainbowcol4                                 { fg="#78a9ff", },
    rainbowcol2                                 { fg="#b5e8e0", },
    rainbowcol1                                 { fg="#e95678", },
    rainbowcol7                                 { fg="#abe9b3", },
    rainbowcol6                                 { fg="#f2cdcd", },



    -- glyphs
    GlyphPalette7                               { fg="#cdd6f4", },
    GlyphPalette9                               { fg="#e95678", },
    GlyphPalette1                               { fg="#e95678", },
    GlyphPalette2                               { fg="#b5e8e0", },
    GlyphPalette3                               { fg="#fae3b0", },
    GlyphPalette4                               { fg="#78a9ff", },
    GlyphPalette6                               { fg="#b5e8e0", },

    -- markdown
    markdownError                               { Normal }, -- keep it normal, otherwise it highlight underscore (_) in cmp
    markdownHeadingDelimiter                    { fg="#ff9d64", gui="bold", },
    markdownH1                                  { fg="#9d7dd8", },
    markdownH2                                  { fg="#9d7dd8", },
    markdownH3                                  { fg="#abe9b3", },
    markdownH4                                  { fg="#fae3b0", },
    markdownH5                                  { fg="#f5c2e7", },
    markdownH6                                  { fg="#b5e8e0", },
    -- markdownCode                                { fg="#f2cdcd", },
    markdownLinkText                            { fg="#78a9ff", gui="underline", },
    markdownCodeBlock                           { fg="#f2cdcd", },


    NvimInvalidSpacing                          { ErrorMsg },

    Question                                    { fg = custom.verdant_green, },
    FloatTitle                                  { Title },
    Pmenu                                       { fg="#cdd6f4", bg="#27272e", },
    PmenuKind                                   { Pmenu },
    PmenuExtra                                  { Pmenu },
    PmenuSel                                    { fg="#0f0f17", gui="bold", bg = custom.verdant_green, },
    PmenuKindSel                                { PmenuSel },
    PmenuExtraSel                               { PmenuSel },
    PmenuSbar                                   { bg="#27272e", },
    PmenuThumb                                  { bg="#d7def6", },
    QuickFixLine                                { gui="bold", bg="#282737", },
    HopCursor                                   { Cursor },
    NvimSpacing                                 { Normal },
    FloatShadow                                 { bg="black", blend=80, },
    FloatShadowThrough                          { bg="black", blend=100, },
    RedrawDebugNormal                           { gui="reverse", },
    RedrawDebugClear                            { bg="yellow", },
    RedrawDebugComposed                         { bg="green", },
    RedrawDebugRecompose                        { bg="red", },



    sym"@function.macro"                        { fg="#78a9ff", gui="bold", },
    sym"@field"                                 { fg="#78a9ff", },
    sym"@property"                              { fg="#78a9ff", },
    sym"@lsp.type.property"                     { sym"@property" },
    sym"@exception"                             { fg="#78a9ff", },
    sym"@variable"                              { fg="#cdd6f4", },
    sym"@lsp.typemod.variable.injected"         { sym"@variable" },
    sym"@namespace"                             { fg="#78a9ff", },
    sym"@lsp.type.namespace"                    { sym"@namespace" },

    NvimInternalError                           { fg="#e95678", },
    NvimFigureBrace                             { NvimInternalError },
    NvimSingleQuotedUnknownEscape               { NvimInternalError },
    NvimInvalidSingleQuotedUnknownEscape        { NvimInternalError },





    HighlightUndo                               { fg= custom.verdant_green, bg= mocha.surface0, },




    -- iblindent                                   { fg="#313244", },
    -- iblwhitespace                               { NonText },
    iblscope                                    { fg="#cdd6f4", },
    sym"@ibl.scope.char.1"                      { fg="#cdd6f4", gui="nocombine", },
    sym"@ibl.scope.underline.1"                 { sp="#cdd6f4", gui="underline", },
    -- sym"@ibl.indent.char.1"                     { fg="#313244", gui="nocombine", },
    -- sym"@ibl.whitespace.char.1"                 { gui="nocombine", },
    -- indentblanklineindent1                      { fg="#363545", blend=0, },
    -- indentblanklineindent2                      { fg="#555464", blend=0, },
    -- IndentBlanklineIndent3                      { fg="#ff9d64", blend=0, },
    -- IndentBlanklineIndent4                      { fg="#b5e8e0", blend=0, },
    -- IndentBlanklineIndent5                      { fg="#e95678", blend=0, },
    -- IndentBlanklineIndent6                      { fg="#fae3b0", blend=0, },
    -- IndentBlanklineContextStart                 { sp="#cdd6f4", gui="underline", bg="#27272e", },
    IndentBlanklineContextStart                 { bg="#27272e", },
    IndentBlanklineContextChar                  { fg="#be95ff", },
    IndentBlanklineSpaceChar                    { fg="#363545", },
    IndentBlanklineChar                         { fg="#363545", },



    CmpItemAbbr                                 { fg="#9399b2", },
    CmpItemAbbrDefault                          { fg="#cdd6f4", },
    CmpItemAbbrDeprecated                       { fg="#6c7086", gui="strikethrough", },
    CmpItemAbbrDeprecatedDefault                { fg="#6c7086", },
    CmpItemAbbrMatch                            { fg="#cdd6f4", gui="bold", },
    CmpItemAbbrMatchDefault                     { fg="#cdd6f4", },
    CmpItemAbbrMatchFuzzy                       { fg="#cdd6f4", gui="bold", },
    CmpItemAbbrMatchFuzzyDefault                { fg="#cdd6f4", },
    CmpItemKind                                 { fg="#78a9ff", },
    -- CmpItemKindOperatorDefault                  { CmpItemKind },
    -- CmpItemKindModuleDefault                    { CmpItemKind },
    -- CmpItemKindTypeParameterDefault             { CmpItemKind },
    -- CmpItemKindStructDefault                    { CmpItemKind },
    -- CmpItemKindEnumMemberDefault                { CmpItemKind },
    -- CmpItemKindFileDefault                      { CmpItemKind },
    -- CmpItemKindEnumDefault                      { CmpItemKind },
    -- CmpItemKindTextDefault                      { CmpItemKind },
    -- CmpItemKindUnitDefault                      { CmpItemKind },
    -- CmpItemKindValueDefault                     { CmpItemKind },
    -- CmpItemKindFolderDefault                    { CmpItemKind },
    -- CmpItemKindColorDefault                     { CmpItemKind },
    -- CmpItemKindKeywordDefault                   { CmpItemKind },
    -- CmpItemKindClassDefault                     { CmpItemKind },
    -- CmpItemKindSnippetDefault                   { CmpItemKind },
    -- CmpItemKindPropertyDefault                  { CmpItemKind },
    -- CmpItemKindConstantDefault                  { CmpItemKind },
    -- CmpItemKindFunctionDefault                  { CmpItemKind },
    -- CmpItemKindReferenceDefault                 { CmpItemKind },
    -- CmpItemKindInterfaceDefault                 { CmpItemKind },
    -- CmpItemKindVariableDefault                  { CmpItemKind },
    -- CmpItemKindFieldDefault                     { CmpItemKind },
    -- CmpItemKindConstructorDefault               { CmpItemKind },
    -- CmpItemKindMethodDefault                    { CmpItemKind },
    -- CmpItemKindEventDefault                     { CmpItemKind },
    -- CmpItemKindDefault                          { fg="#7dcfff", },
    CmpItemMenu                                 { fg="#cdd6f4", },
    CmpItemMenuDefault                          { fg="#cdd6f4", },
    CmpItemKindOperator                         { fg="#78a9ff", },
    CmpItemKindModule                           { fg="#78a9ff", },
    CmpItemKindTypeParameter                    { fg="#78a9ff", },
    CmpItemKindStruct                           { fg="#78a9ff", },
    CmpItemKindEnumMember                       { fg="#e95678", },
    CmpItemKindFile                             { fg="#78a9ff", },
    CmpItemKindEnum                             { fg="#abe9b3", },
    CmpItemKindText                             { fg="#b5e8e0", },
    CmpItemKindUnit                             { fg="#abe9b3", },
    CmpItemKindValue                            { fg="#ff9d64", },
    CmpItemKindFolder                           { fg="#78a9ff", },
    CmpItemKindColor                            { fg="#e95678", },
    CmpItemKindKeyword                          { fg="#e95678", },
    CmpItemKindClass                            { fg="#fae3b0", },
    CmpItemKindSnippet                          { fg="#9d7dd8", },
    CmpItemKindProperty                         { fg="#abe9b3", },
    CmpItemKindConstant                         { fg="#ff9d64", },
    CmpItemKindFunction                         { fg="#78a9ff", },
    CmpItemKindReference                        { fg="#e95678", },
    CmpItemKindInterface                        { fg="#fae3b0", },
    CmpItemKindVariable                         { fg="#f2cdcd", },
    CmpItemKindField                            { fg="#abe9b3", },
    CmpItemKindConstructor                      { fg="#78a9ff", },
    CmpItemKindMethod                           { fg="#78a9ff", },
    CmpItemKindEvent                            { fg="#78a9ff", },
    CmpItemKindCopilot                          { fg="#b5e8e0", },

    MiniSurround                                { },

    -- NvimTree
    NvimTreePopup                               { Normal },
    NvimTreeNormalFloat                         { NormalFloat },
    NvimTreeCursorColumn                        { CursorColumn },
    NvimTreeEndOfBuffer                         { EndOfBuffer },
    NvimTreeSymlinkFolderName                   { Directory },
    NvimTreeCursorLineNr                        { CursorLineNr },
    NvimTreeStatusLine                          { StatusLine },
    NvimTreeCutHL                               { SpellBad },
    NvimTreeCopiedHL                            { SpellRare },
    NvimTreeBookmarkHL                          { SpellLocal },
    NvimTreeWindowPicker                        { fg="#e95678", bg="#13121a", },
    NvimTreeGitNewIcon                              { fg = custom.green, },
    NvimTreeGitFileNewHL                             { NvimTreeGitNewIcon },
    NvimTreeGitRenamedIcon                          { fg="#ff80ff", },
    NvimTreeGitFileRenamedHL                         { NvimTreeGitRenamedIcon },
    NvimTreeGitMergeIcon                            { fg="#ffa0a0", },
    NvimTreeGitFileMergeHL                           { NvimTreeGitMergeIcon },
    NvimTreeGitStagedIcon                           { fg="#ffa0a0", },
    NvimTreeGitFileStagedHL                          { NvimTreeGitStagedIcon },
    NvimTreeGitDeletedIcon                          { fg="#e95678", },
    NvimTreeGitFileDeletedHL                         { NvimTreeGitDeletedIcon },
    NvimTreeGitDirtyIcon                            { fg = custom.yellow, },
    NvimTreeGitFileDirtyHL                           { NvimTreeGitDirtyIcon },
    NvimTreeModifiedIcon                        { fg="#ffa0a0", },
    NvimTreeOpenedHL                          { fg="#f5c2e7", },
    NvimTreeOpenedFileIcon                      { NvimTreeOpenedHL },
    NvimTreeImageFile                           { fg="#cdd6f4", },
    NvimTreeSpecialFile                         { fg = custom.yellow, gui="bold", },
    NvimTreeExecFile                            { fg= custom.verdant_green, gui="bold", },
    NvimTreeRootFolder                          { fg="#e95678", gui="bold", },
    NvimTreeFolderIcon                          { fg="#78a9ff", },
    -- NvimTreeClosedFolderIcon                    { NvimTreeFolderIcon },
    -- NvimTreeOpenedFolderIcon                    { NvimTreeFolderIcon },
    NvimTreeSymlink                             { fg="#f5c2e7", },
    NvimTreeIndentMarker                        { fg="#4e4d5d", },
    NvimTreeBookmarkIcon                            { fg="#ffa0a0", },
    NvimTreeLiveFilterValue                     { gui="bold", },
    NvimTreeLiveFilterPrefix                    { fg="#ff80ff", gui="bold", },
    NvimTreeWinSeparator                        { fg="#0d0c14", bg="#0d0c14", },
    NvimTreeCursorLine                          { bg="#13121a", },
    NvimTreeNormalNC                            { bg="#0d0c14", },
    NvimTreeNormal                              { fg="#cdd6f4", bg="#0d0c14", },
    NvimTreeSignColumn                          { NvimTreeNormal },
    NvimTreeOpenedFolderName                    { fg="#78a9ff", },
    NvimTreeEmptyFolderName                     { fg="#78a9ff", },
    NvimTreeFolderName                          { fg="#78a9ff", },
    NvimTreeGitIgnoredIcon                          { fg="#605f6f", },
    NvimTreeGitFileIgnoredHL                         { NvimTreeGitIgnoredIcon },
    NvimTreeStatusLineNC                        { fg="#181825", bg="#181825", },

    NvimTreeLspDiagnosticsHint                  { DiagnosticHint },
    NvimTreeLspDiagnosticsInformation           { DiagnosticInfo },
    NvimTreeLspDiagnosticsWarning               { DiagnosticWarn },
    NvimTreeLspDiagnosticsError                 { DiagnosticError },


    LspDiagnosticsHint                          { fg="#b5e8e0", },
    LspDiagnosticsInformation                   { fg="#89dceb", },
    LspDiagnosticsWarning                       { fg = custom.yellow, },
    LspDiagnosticsError                         { fg="#e95678", },
    LspDiagnosticsUnderlineHint                 { sp="#b5e8e0", gui="underline", },
    LspDiagnosticsVirtualTextError              { fg="#e95678", },
    LspDiagnosticsVirtualTextWarning            { fg = custom.yellow, },
    LspDiagnosticsDefaultError                  { fg="#e95678", },
    LspDiagnosticsDefaultWarning                { fg = custom.yellow, },
    LspDiagnosticsDefaultInformation            { fg="#89dceb", },
    LspDiagnosticsDefaultHint                   { fg="#b5e8e0", },
    LspDiagnosticsUnderlineError                { sp="#e95678", gui="underline", },
    LspDiagnosticsUnderlineWarning              { sp = custom.yellow, gui="underline", },
    LspDiagnosticsUnderlineInformation          { sp="#89dceb", gui="underline", },
    LspDiagnosticsVirtualTextInformation        { fg="#89dceb", },
    LspDiagnosticsVirtualTextHint               { fg="#b5e8e0", },


    LspKindValue                                { fg="#ff9d64", },
    LspKindUnit                                 { fg="#abe9b3", },
    LspKindFolder                               { fg="#78a9ff", },
    LspKindSnippet                              { fg="#9d7dd8", },
    LspKindText                                 { fg="#abe9b3", },
    LspKindStaticMethod                         { fg="#ff9d64", },
    LspKindParameter                            { fg="#78a9ff", },
    LspKindTypeAlias                            { fg="#abe9b3", },
    LspKindString                               { fg="#abe9b3", },
    LspKindObject                               { fg="#fae3b0", },
    LspKindNull                                 { fg="#fae3b0", },
    LspKindBoolean                              { fg="#ff9d64", },
    LspKindArray                                { fg="#ff9d64", },
    LspKindVariable                             { fg="#ff9d64", },
    LspKindTypeParameter                        { fg="#da4b4a", },
    LspKindStruct                               { fg="#fae3b0", },
    LspKindProperty                             { fg="#b5e8e0", },
    LspKindPackage                              { fg="#78a9ff", },
    LspKindOperator                             { fg="#89dceb", },
    LspKindNumber                               { fg="#ff9d64", },
    LspKindNamespace                            { fg="#78a9ff", },
    LspKindModule                               { fg="#78a9ff", },
    LspKindMethod                               { fg="#78a9ff", },
    LspKindKey                                  { fg="#e95678", },
    LspKindInterface                            { fg="#fae3b0", },
    LspKindFunction                             { fg="#78a9ff", },
    LspKindFile                                 { fg="#f5e0dc", },
    LspKindField                                { fg="#b5e8e0", },
    LspKindEvent                                { fg="#fae3b0", },
    LspKindEnumMember                           { fg="#b5e8e0", },
    LspKindEnum                                 { fg="#fae3b0", },
    LspKindConstructor                          { fg="#74c7ec", },
    LspKindConstant                             { fg="#ff9d64", },
    LspKindClass                                { fg="#fae3b0", },

    OutlineIndent                               { fg="#9399b2", },
    SagaShadow                                  { bg="#11111b", },
    CallHierarchyTitle                          { fg="#78a9ff", },
    CallHierarchyIcon                           { fg="#9d7dd8", },
    RenameNormal                                { fg="#cdd6f4", },
    FinderStart                                 { fg="#b5e8e0", gui="bold", },
    FinderSpinner                               { fg="#9d7dd8", gui="bold", },
    FinderSpinnerTitle                          { fg="#9d7dd8", gui="bold", },
    FinderType                                  { fg="#f2cdcd", },
    FinderIcon                                  { fg="#f2cdcd", },
    FinderCode                                  { fg="#cdd6f4", },
    FinderFName                                 { fg="#a6adc8", gui="bold", },
    FinderSelection                             { fg="#78a9ff", gui="bold", },
    CodeActionNumber                            { fg="#f5c2e7", },
    CodeActionText                              { fg="#abe9b3", },
    ActionPreviewTitle                          { fg="#9d7dd8", bg="#0f0f17", },
    ActionFix                                   { fg="#f5c2e7", },

    SagaBeacon                                  { bg="#2b2b3c", },
    SagaCount                                   { fg="#7f849c", },
    SagaCollapse                                { fg="#abe9b3", },
    SagaExpand                                  { fg="#abe9b3", },
    SagaNormal                                  { bg="#0f0f17", },
    SagaBorder                                  { fg="#78a9ff", },

    TitleIcon                                   { fg="#78a9ff", },
    TitleString                                 { fg="#cdd6f4", },
    mkdCodeStart                                { fg="#f2cdcd", gui="bold", },
    qfLineNr                                    { fg="#fae3b0", },

    DapUIStoppedThread                          { fg="#89dceb", },
    DapUIWatchesValue                           { fg="#abe9b3", },
    DapStopped                                  { fg="#da4b4a", },
    DapUIWatchesError                           { fg="#da4b4a", },
    DapUIBreakpointsInfo                        { fg="#abe9b3", },
    DapUIUnavailable                            { fg="#45475a", },
    DapUIRestart                                { fg="#abe9b3", },
    DapUIPlayPause                              { fg="#abe9b3", },
    DapUIStop                                   { fg="#e95678", },
    DapUIStepOut                                { fg="#78a9ff", },
    DapUIStepBack                               { fg="#78a9ff", },
    DapUIStepInto                               { fg="#78a9ff", },
    DapUIStepOver                               { fg="#78a9ff", },
    DapUIBreakpointsDisabledLine                { fg="#585b70", },
    DapUIBreakpointsCurrentLine                 { fg="#abe9b3", gui="bold", },
    DapUIBreakpointsPath                        { fg="#89dceb", },
    DapUIWatchesEmpty                           { fg="#da4b4a", },
    DapUIFloatBorder                            { fg="#89dceb", },
    DapUILineNumber                             { fg="#89dceb", },
    DapUIThread                                 { fg="#abe9b3", },
    DapUIDecoration                             { fg="#89dceb", },
    DapUIModifiedValue                          { fg="#ff9d64", },
    DAPUIVariable                               { fg="#cdd6f4", },
    DAPUIValue                                  { fg="#89dceb", },
    DAPUIType                                   { fg="#9d7dd8", },
    DAPUIScope                                  { fg="#89dceb", },
    DapLogPoint                                 { fg="#89dceb", },
    DapBreakpointCondition                      { fg="#fae3b0", },
    DapBreakpoint                               { fg="#e95678", },

    SignColumnSB                                { fg="#45475a", bg="#11111b", },

    NotifyINFOTitle                             { fg="#78a9ff", },
    NotifyINFOIcon                              { fg="#78a9ff", },
    NotifyINFOBorder                            { fg="#78a9ff", },
    NotifyERRORIcon                             { fg="#e95678", },
    NotifyERRORBorder                           { fg="#e95678", },
    NotifyWARNIcon                              { fg="#fae3b0", },
    NotifyWARNTitle                             { fg="#fae3b0", },
    NotifyERRORTitle                            { fg="#e95678", },
    NotifyDEBUGIcon                             { fg="#ff9d64", },
    NotifyDEBUGBorder                           { fg="#ff9d64", },
    NotifyWARNBorder                            { fg="#fae3b0", },

    -- VimwikiHeader6                              { fg="#9d7dd8", gui="bold", },
    -- VimwikiTag                                  { fg="#ff9d64", },
    -- VimwikiLink                                 { fg="#89dceb", },
    -- VimwikiHeader2                              { fg="#abe9b3", gui="bold", },
    -- VimwikiHR                                   { fg="#fae3b0", },
    -- VimwikiHeader4                              { fg="#89dceb", gui="bold", },
    -- VimwikiMarkers                              { fg="#a6adc8", },
    -- VimwikiHeaderChar                           { fg="#474656", },
    -- VimwikiHeader3                              { fg="#78a9ff", gui="bold", },
    -- VimwikiHeader1                              { fg="#ff9d64", gui="bold", },
    -- VimwikiHeader5                              { fg="#fae3b0", gui="bold", },
    -- VimwikiList                                 { fg="#ff9d64", },

    FidgetTitle                                 { fg="#78a9ff", },
    FidgetTask                                  { fg="#cdd6f4", bg="#181825", },
    LspCodeLens                                 { fg="#6c7086", },
    qfFileName                                  { fg="#78a9ff", },
    htmlH1                                      { fg="#f5c2e7", gui="bold", },
    htmlH2                                      { fg="#78a9ff", gui="bold", },
    mkdCodeDelimiter                            { fg="#cdd6f4", bg="#0f0f17", },
    mkdCodeEnd                                  { fg="#f2cdcd", gui="bold", },
    debugPC                                     { bg="#11111b", },
    debugBreakpoint                             { fg="#6c7086", bg="#0f0f17", },

    illuminatedWord                             { bg="#45475a", },
    IlluminatedWordText                         { bg="#353646", },
    IlluminatedWordRead                         { bg="#353646", },
    IlluminatedWordWrite                        { bg="#353646", },
    illuminatedCurWord                          { bg="#45475a", },

    MasonHeading                                { gui="bold", },
    MasonError                                  { fg="#e95678", },
    MasonMutedBlockBold                         { fg="#0f0f17", gui="bold", bg="#fae3b0", },
    MasonMuted                                  { fg="#6c7086", },
    MasonHighlightBlockBoldSecondary            { fg="#0f0f17", gui="bold", },
    MasonHighlightBlockSecondary                { fg="#0f0f17", bg="#78a9ff", },
    MasonHighlightSecondary                     { fg="#9d7dd8", },
    MasonHighlightBlockBold                     { fg="#0f0f17", gui="bold", bg="#78a9ff", },
    MasonHighlightBlock                         { fg="#0f0f17", bg="#abe9b3", },
    MasonHighlight                              { fg="#abe9b3", },
    MasonHeaderSecondary                        { fg="#0f0f17", gui="bold", bg="#78a9ff", },
    MasonMutedBlock                             { fg="#0f0f17", bg="#6c7086", },
    MasonHeader                                 { fg="#0f0f17", gui="bold", },


    sym"@scope"                                 { gui="bold", },
    sym"@variable.builtin"                      { fg="#7dcfff", },
    sym"@lsp.typemod.variable.defaultLibrary"   { sym"@variable.builtin" },

    sym"@tag"                                   { fg="#9d7dd8", },
    sym"@tag.attribute"                         { fg="#b5e8e0", },
    sym"@tag.delimiter"                         { fg="#93baff", },

    sym"@symbol"                                { fg="#80ed99", },
    sym"@enum"                                  { fg="#b5e8e0", },
    sym"@text.danger"                           { fg="#0f0f17", bg="#e95678", },
    sym"@text.strike"                           { fg= mocha.overlay0, gui="strikethrough", },
    sym"@text.emphasis"                         { fg="#f6ca6b", },
    sym"@text.strong"                           { fg="#da4b4a", gui="bold", },
    sym"@text.todo.checked"                     { fg="#abe9b3", },
    sym"@text.environment"                      { fg="#f5c2e7", },
    sym"@text.environment.name"                 { fg="#78a9ff", },
    sym"@text.warning"                          { fg="#0f0f17", bg="#fae3b0", },
    sym"@text.note"                             { fg="#0f0f17", bg="#78a9ff", },
    sym"@text.todo.unchecked"                   { fg="#7f849c", },
    sym"@text.math"                             { fg="#78a9ff", },

    sym"@reference"                             { fg="#cdd6f4", },
    sym"@attribute"                             { fg= custom.pink, },
    sym"@lsp.type.decorator.rust"               { fg = custom.blue }, -- for derive in Bevy :3

    sym"@decorator"                             { fg="#f2cdcd", },
    sym"@struct"                                { fg="#78a9ff", },
    sym"@event"                                 { fg="#f2cdcd", },
    sym"@interface"                             { fg="#f2cdcd", },
    sym"@lsp.type.interface"                    { sym"@interface" },

    sym"@type.builtin"                          { fg="#ff7eb6", },
    sym"@typeParameter"                         { fg="#fae3b0", },

    sym"@definition"                            { sp="#414050", gui="underline", },
    sym"@regexp"                                { fg="#f5c2e7", },
    sym"@modifier"                              { fg="#f2cdcd", },
    sym"@enumMember"                            { fg="#f2cdcd", },
    sym"@class"                                 { fg="#78a9ff", },
    sym"@none"                                  { fg="#cdd6f4", },

    sym"@annotation"                            { fg="#93baff", },

    RenamerBorder                               { fg="#e95678", },
    RenamerTitle                                { fg="#0f0f17", bg="#e95678", },
    TooLong                                     { fg="#78a9ff", },
    Variable                                    { fg="#cdd6f4", },
    DashboardShortCut                           { fg="#f5c2e7", },
    DashboardHeader                             { fg="#78a9ff", },
    DashboardCenter                             { fg="#abe9b3", },
    DashboardFooter                             { fg="#fae3b0", },
    LspSignatureActiveParameter                 { fg="#0f0f17", bg="#abe9b3", },

    TroubleCount                                { fg="#f5c2e7", bg="#45475a", },
    TroubleNormal                               { fg="#cdd6f4", bg="#11111b", },
    TroubleText                                 { fg="#abe9b3", },

    TSDefinitionUsage                           { sp="#414050", gui="underline", },

    GitSignsDelete                              { fg = custom.red, },
    GitSignsChange                              { fg = custom.yellow, },
    GitSignsAdd                                 { fg = custom.green, },
    -- GitSignsAddPreview                          { DiffAdd },
    -- GitSignsDeletePreview                       { DiffDelete },
    -- GitSignsChange                              { fg="#fae3b0", },
    -- GitSignsDelete                              { fg="#e95678", },
    -- GitSignsAdd                                 { fg="#abe9b3", },
    -- GitSignsStagedAdd                           { fg="#557459", },
    -- GitSignsStagedChange                        { fg="#7d7158", },
    -- GitSignsStagedDelete                        { fg="#742b3c", },
    -- GitSignsStagedChangedelete                  { fg="#7d7158", },
    -- GitSignsStagedTopdelete                     { fg="#742b3c", },
    -- GitSignsStagedAddNr                         { fg="#557459", },
    -- GitSignsStagedChangeNr                      { fg="#7d7158", },
    -- GitSignsStagedDeleteNr                      { fg="#742b3c", },
    -- GitSignsStagedChangedeleteNr                { fg="#7d7158", },
    -- GitSignsStagedTopdeleteNr                   { fg="#742b3c", },
    -- GitSignsStagedAddLn                         { bg="#2b3633", },
    -- GitSignsStagedChangeLn                      { bg="#161a27", },
    -- GitSignsStagedChangedeleteLn                { bg="#161a27", },

  }
end)

-- Return our parsed theme for extension or use elsewhere.
return theme

-- vi:nowrap
